# -*- coding: utf-8 -*-
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtCore import QRect, QCoreApplication, QMetaObject, QThread, pyqtSignal
from PyQt5.QtGui import QIcon, QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QWidget, QTableView, QPushButton, QComboBox, QLabel, QListWidget, QMenuBar, QStatusBar, QAction, QHeaderView, QAbstractItemView, QTableView, QMessageBox, QInputDialog, QLineEdit, QVBoxLayout, QDialogButtonBox, QDialog, QApplication,QMainWindow
import paramiko
import sys
import os
from subprocess import Popen
from time import sleep


sys.path.append(os.path.dirname(__file__))
from utils import *
from model import *

GRP_CONFIG = "DEFAULT"
CONFIG = []
df = ''
IP_LIST = []

class InterfaceSelectionDialog(QDialog):
    def __init__(self, interfaces, parent=None):
        super().__init__(parent)
        # 设置对话框窗口标题
        self.setWindowTitle("Select Network Interface")
        
        # 创建垂直布局管理器
        self.layout = QVBoxLayout(self)
        
        # 创建并添加一个标签，用于提示用户选择网络接口
        self.label = QLabel("Please select a network interface:", self)
        self.layout.addWidget(self.label)
        
        # 创建并添加一个下拉框，里面包含所有可供选择的网络接口
        self.interfaceBox = QComboBox(self)
        self.interfaceBox.addItems(interfaces)  # 将接口列表添加到下拉框中
        self.layout.addWidget(self.interfaceBox)
        
        # 创建并添加对话框按钮框，包含“确定”和“取消”按钮
        self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, self)
        self.layout.addWidget(self.buttonBox)
        
        # 连接“确定”按钮的点击事件到对话框的 accept() 方法
        self.buttonBox.accepted.connect(self.accept)
        # 连接“取消”按钮的点击事件到对话框的 reject() 方法
        self.buttonBox.rejected.connect(self.reject)

    # 获取当前选中的网络接口
    def getSelectedInterface(self):
        return self.interfaceBox.currentText()

    

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Hanshow AP Config Toolbox")
        MainWindow.resize(900, 650)
        MainWindow.setStyleSheet('QWidget {font: "Roboto Mono"}')
        
        # 中心窗口，名为centralwidget
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # 表格视图
        self.tableWidget = QTableView(self.centralwidget)
        self.tableWidget.setGeometry(QRect(30, 20, 511, 560))
        self.tableWidget.setObjectName("tableWidget")
        # 按钮，胶pushButton
        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QRect(700, 40, 75, 24))
        self.pushButton.setObjectName("pushButton")
        # 下拉框
        self.selectBox = QComboBox(self.centralwidget)
        self.selectBox.setGeometry(QRect(688, 80, 100, 24))
        self.selectBox.setObjectName("selectBox")
        # config
        self.configButton = QPushButton(self.centralwidget)
        self.configButton.setGeometry(QRect(650, 120, 75, 24))
        self.configButton.setObjectName("configButton")
        # 把点击信号传到open_config_file
        _translate = QCoreApplication.translate
        self.configButton.setText(_translate("MainWindow", "Edit"))
        self.configButton.setVisible(False)
        self.configButton.clicked.connect(self.open_config_file)
        self.reloadButton = QPushButton(self.centralwidget)
        self.reloadButton.setGeometry(QRect(750, 120, 75, 24))
        
        # reload ？ 没看懂
        self.reloadButton.setObjectName("reloadButton")
        _translate = QCoreApplication.translate
        self.reloadButton.setText(_translate("MainWindow", "Reload"))
        self.reloadButton.setVisible(False)
        
        # 连接reload按钮的点击信号到grpChange方法
        self.reloadButton.clicked.connect(self.grpChange)
        
        # 获取配置文件列表，添加到选择框中，并移除readme.txt
        configs = get_config()
        
        # ['DEFAULT', 'config1', 'config2', 'config3']
        configs.insert(0, GRP_CONFIG) # index = 0,element = GRP_CONFIG
        configs.remove('readme.txt') 
        self.selectBox.addItems(configs)
        self.selectBox.currentIndexChanged.connect(self.grpChange)
        self.alert = QLabel(self.centralwidget)
        self.alert.setGeometry(QRect(30, 580, 511, 24))
        self.alert.setObjectName("disableConnection")
        self.config = QListWidget(self.centralwidget)
        self.config.setGeometry(QRect(550, 180, 340, 380))
        self.config.setObjectName("configInfo")
        
        # 退回选择网络接口按钮
        self.returnButton = QPushButton(self.centralwidget)
        self.returnButton.setGeometry(QRect(675, 10, 150, 24))
        self.returnButton.setObjectName("returnButton")
        self.returnButton.setText(_translate("MainWindow", "Re-Select Network"))
        self.returnButton.clicked.connect(self.show_interface_selection_dialog)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.model = QStandardItemModel(0, 2)
        self.model.setHorizontalHeaderLabels(['Address IP', 'Address Mac'])
        self.tableWidget.setModel(self.model)
        tool = self.addToolBar("File")
        self.action_detail = QAction("Detail", self)
        self.action_config = QAction("Config", self)
        self.action_delete = QAction("Delete", self)
        self.action_version = QAction("Version Check", self)
        self.action_descript = QAction("Descript Check", self)
        tool.addAction(self.action_detail)
        tool.addAction(self.action_config)
        tool.addAction(self.action_delete)
        tool.addAction(self.action_version)
        tool.addAction(self.action_descript)
        tool.actionTriggered[QAction].connect(self.processtrigger)
        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)
        self.tableWidget.setEditTriggers(QTableView.NoEditTriggers)
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.msgBox = QMessageBox()
        self.retranslateUi(MainWindow)
        self.pushButton.released.connect(self.slotAdd)  # type: ignore
        QMetaObject.connectSlotsByName(MainWindow)

        # Show the interface selection dialog on startup
        self.show_interface_selection_dialog()
        

    def show_interface_selection_dialog(self):
        interfaces = get_network_interfaces()
        dialog = InterfaceSelectionDialog(interfaces)
        if dialog.exec_() == QDialog.Accepted:
            self.selected_interface = dialog.getSelectedInterface()
            print(f"Selected interface: {self.selected_interface}")
        else:
            sys.exit()
            
    def slotAdd(self):
        self.pushButton.setEnabled(False)
        self.getAP = GetApTheard(self.selected_interface)
        self.getAP._sum.connect(self.update_tab)
        self.getAP.start()
        global VPN
        if VPN:
            VPN = False
            self.msgBox.setIcon(QMessageBox.Warning)
            self.msgBox.setText("Please disable all your VPN connections!")
            self.msgBox.setWindowTitle("Error")
            self.msgBox.setWindowIcon(QIcon('style/icon.ico'))
            self.msgBox.setStandardButtons(QMessageBox.Ok)
            returnValue = self.msgBox.exec()
            if returnValue == QMessageBox.Ok:
                return

        
    

    #事件触发
    def processtrigger(self, action):
        # 处理用户触发的不同操作的函数
        if action.text() == "Detail":
            # 如果操作是 "Detail"
            r = self.tableWidget.selectionModel().selectedRows()
            # 获取表格中选中的行
            if r:
                # 如果有选中的行
                index_ip = self.tableWidget.model().index(self.tableWidget.currentIndex().row(), 0)
                # 获取选中行中IP列的索引
                index_mac = self.tableWidget.model().index(index_ip.row(), 1)
                # 获取同一行中MAC列的索引
                data_ip = self.tableWidget.model().data(index_ip)
                # 从模型中检索IP数据
                data_mac = self.tableWidget.model().data(index_mac)
                # 从模型中检索MAC数据
                data = [data_ip, data_mac]
                # 将IP和MAC数据组合成一个列表
                print(data)
                # 打印数据用于调试
                self.launchPopup(data_ip, data_mac)
                # 使用IP和MAC数据启动一个弹出窗口

        if action.text() == "Config":
            # 如果操作是 "Config"
            r = self.tableWidget.selectionModel().selectedRows()
            # 获取表格中选中的行
            if r:
                # 如果有选中的行
                index_ip = self.tableWidget.model().index(self.tableWidget.currentIndex().row(), 0)
                # 获取选中行中IP列的索引
                index_mac = self.tableWidget.model().index(index_ip.row(), 1)
                # 获取同一行中MAC列的索引
                data_ip = self.tableWidget.model().data(index_ip)
                # 从模型中检索IP数据
                data_mac = self.tableWidget.model().data(index_mac)
                # 从模型中检索MAC数据
                data = [data_ip, data_mac]
                # 将IP和MAC数据组合成一个列表
                print(data)
                # 打印数据用于调试
                self.launchPopup(data_ip, data_mac)
                # 使用IP和MAC数据启动一个弹出窗口

        if action.text() == "Delete":
            # 如果操作是 "Delete"
            r = self.tableWidget.selectionModel().selectedRows()
            # 获取表格中选中的行
            if r:
                # 如果有选中的行
                index = self.tableWidget.currentIndex()
                # 获取当前选中的索引
                print(index.row())
                # 打印行索引用于调试
                self.model.removeRow(index.row())
                # 从模型中删除选中的行

        if action.text() == "Version Check":
            # 如果操作是 "Version Check"
            if IP_LIST:
                # 如果IP列表不为空
                version = []
                # 初始化一个空列表用于存储版本信息
                res = ["AP Version Check Result:", "IP\t\t\tVersion"]
                # 初始化结果列表并添加标题
                for ip in IP_LIST:
                    # 遍历IP列表中的每个IP
                    sleep(0.2)
                    # 每次检查之间暂停0.2秒，以避免系统过载
                    ssh = paramiko.SSHClient()
                    # 创建一个新的SSH客户端实例
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    # 设置策略为自动添加主机密钥（如果缺失）
                    try:
                        ssh.connect(ip, username="root", password="hanshow-imx6")
                        # 尝试使用给定的凭证连接到该IP地址的SSH服务器
                        
                        
                        stdin, stdout, stderr = ssh.exec_command("[ -f /home/elinker/bin/elinker ] && echo 'File exists' || echo 'File not found'")
                        # 执行命令检查文件是否存在，[ -f /home/elinker/bin/elinker ] 判断语句
                        
                        file_check = stdout.read().decode('utf-8').strip()
                        if file_check == 'File not found':
                            version.append("Not a standard AP")
                        else:
                            ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command("/home/elinker/bin/elinker -v")
                            version.append(ssh_stdout.read().decode('utf-8'))
                    except:
                        version.append("ERROR")
                        # 如果出现错误，向版本列表中添加“ERROR”
                        print("Error when connect to : ", ip)
                        # 打印错误信息用于调试
                for i, v in zip(IP_LIST, version):
                    # 同时遍历IP列表和版本列表
                    res.append(i + '\t\t' + v)
                    # 将IP及其对应的版本添加到结果列表中
                self.msgBox.setIcon(QMessageBox.Information)
                # 将消息框的图标设置为信息图标
                self.msgBox.setText("\n".join(res))
                # 将消息框的文本设置为结果列表的连接字符串
                self.msgBox.setWindowTitle("AP Version")
                # 设置消息框的标题
                self.msgBox.setWindowIcon(QIcon('style/icon.ico'))
                # 设置消息框的窗口图标
                self.msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                # 向消息框添加确定和取消按钮
                returnValue = self.msgBox.exec()
                # 执行消息框并获取返回值
                if returnValue == QMessageBox.Ok:
                    # 如果用户点击确定
                    return
                    # 返回函数



        if action.text() == "Descript Check":
            if IP_LIST:
                # 如果IP列表不为空
                descript = []
                # 初始化一个空列表用于存储描述信息
                res = ["Description Check Result:", "IP\t\t\tDescription"]
                # 初始化结果列表并添加标题
                for ip in IP_LIST:
                    sleep(0.2)
                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    try:
                        ssh.connect(ip, username="root", password="hanshow-imx6", timeout=1)
                        # 尝试使用给定的凭证连接到该IP地址的SSH服务器，设置超时时间为1秒
                        ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command("cat /tmp/.config.ini |grep descript", timeout=1)
                        # 执行命令以获取配置文件中的描述信息，并设置命令超时时间为1秒
                        output = ssh_stdout.read().decode('utf-8').strip()
                        # 读取输出并去除两端空白
                        if output:
                            d = output.split('=')[1]
                            descript.append(d)
                        else:
                            descript.append("no such file")
                            # 没有找到描述信息
                    except paramiko.ssh_exception.SSHException:
                        descript.append("ERROR")
                        # 如果出现SSH连接错误，向描述列表中添加“ERROR”
                        print("Error when connect to : ", ip)
                    except paramiko.ssh_exception.SSHException as e:
                        if "timed out" in str(e):
                            descript.append("Check timeout")
                            # 检查过程超时
                        else:
                            descript.append("ERROR")
                            print("Error when connect to : ", ip)
                for i, v in zip(IP_LIST, descript):
                    # 同时遍历IP列表和描述列表
                    res.append(i + '\t\t' + v)
                    # 将IP及其对应的描述添加到结果列表中
                self.msgBox.setIcon(QMessageBox.Information)
                # 将消息框的图标设置为信息图标
                self.msgBox.setText("\n".join(res))
                # 将消息框的文本设置为结果列表的连接字符串
                self.msgBox.setWindowTitle("AP Description")
                # 设置消息框的标题
                self.msgBox.setWindowIcon(QIcon('style/icon.ico'))
                # 设置消息框的窗口图标
                self.msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                # 向消息框添加确定和取消按钮
                returnValue = self.msgBox.exec()
                # 执行消息框并获取返回值
                if returnValue == QMessageBox.Ok:
                    # 如果用户点击确定
                    return
                    # 返回函数



    def grpChange(self):
        global GRP_CONFIG, CONFIG
        # 获取当前选择框中选中的文本，赋值给 GRP_CONFIG
        GRP_CONFIG = self.selectBox.currentText()
        self.reloadButton.setEnabled(False)  # 禁用重载按钮
        if GRP_CONFIG != "DEFAULT":
            # 如果不是默认配置，则读取对应配置文件的内容(read_config_file)，然后更新 CONFIG 变量
            CONFIG = get_file_config(f"config/{GRP_CONFIG}")
            self.read_config_file()
            # 显示配置按钮和重载，reload ？
            self.configButton.setVisible(True)
            self.reloadButton.setVisible(True)
            # 默认配置
        else:
            # 选择DEFUALT配置，则清空configInfo
            self.config.clear()
            self.configButton.setVisible(False)
            self.reloadButton.setVisible(False)
            CONFIG = []

    def read_config_file(self):
        self.config.clear()
        self.config.addItem("Settings to change manually: ")

        # 遍历全局 CONFIG 列表中的每个配置项
        for i, conf in enumerate(CONFIG):
            # 如果配置项以 "!" 开头，表示该项需要手动更改
            if conf[0] == "!":
                # =拆分，0拿第一个，得到!字段名，把!拆掉,得到字段名
                type = conf.split("=")[0].split("!")[1].strip()
                value = conf.split("=")[1]  
                # 将配置类型翻译成用户友好的描述，并与配置值连接起来添加到配置列表视图中
                self.config.addItem(TRANSLATION[type] + value)
        
        ########################## 添加一个空行，这里的意义没有看懂######################
        self.config.addItem("")
        self.config.addItem("Settings do not need to be changed: ")

        # 再次遍历全局 CONFIG 列表中的每个配置项
        for i, conf in enumerate(CONFIG):
            # 如果配置项不以 "!" 开头，表示该项不需要手动更改
            if conf[0] != "!":
                # 分离出配置类型和配置值
                type = conf.split("=")[0].strip()
                value = conf.split("=")[1]
                self.config.addItem(TRANSLATION[type] + value)


    def open_config_file(self):
        print("open file")
        self.msgBox.setIcon(QMessageBox().Warning)
        self.msgBox.setWindowIcon(QIcon('style/icon.ico'))
        self.msgBox.setText(WARNING)
        self.msgBox.setWindowTitle("Important Information")
        self.msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        returnValue = self.msgBox.exec()
        if returnValue == QMessageBox.Ok:
            Popen(f'notepad ".\config\{GRP_CONFIG}"', shell=False)
            self.reloadButton.setEnabled(True)
            
            
    #修改 slotAdd 方法以使用选定的网络接口进行扫描
    def slotAdd(self):
        self.pushButton.setEnabled(False)
        self.getAP = GetApTheard(self.selected_interface)
        self.getAP._sum.connect(self.update_tab)
        self.getAP.start()
        global VPN
    
    def update_tab(self):
        global IP_LIST
        i = 0
        
        # 获取符合条件的 IP 和 MAC 地址的df
        df_filtered = get_arp_ip_mac()
        
        print(f"df_filtered 在 update_tab 中: {df_filtered}")
        print(f"df_filtered 的列名: {df_filtered.columns.tolist()}")

        # 获取列名
        ip_column = df_filtered.columns[0]
        mac_column = df_filtered.columns[1]

        # 遍历过滤后的 DataFrame 中的每个元素
        for _, row in df_filtered.iterrows():
            print(f"当前行数据: {row}")
            ip = row[ip_column]
            mac = row[mac_column]
            self.model.setItem(i, 0, QStandardItem(ip))
            self.model.setItem(i, 1, QStandardItem(mac.replace('-', ':').upper()))
            i += 1
            IP_LIST.append(ip)
        
        self.pushButton.setEnabled(True)
        print(IP_LIST)


    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(
            "MainWindow", "Hanshow AP config Toolbox"))
        MainWindow.setWindowIcon(QIcon('style/icon.ico'))
        self.pushButton.setText(_translate("MainWindow", "Get All AP"))

        self.alert.setText(_translate(
            "MainWindow", "Disable All Your VPN Connections Before Using"))
        self.alert.setStyleSheet("color: red;")

    def change_pwd(self, value=""):
        global CONFIG
        # 弹出一个输入对话框，提示用户输入AP登录密码
        # pwd 是用户输入的密码，ok 是一个布尔值，表示用户是否点击了“确定”按钮
        pwd, ok = QInputDialog.getText(
            self, "Password for admin", "Password(blank for not change): ", QLineEdit.Normal, value)
        # 如果用户点击了“取消”按钮，ok 为 False，函数返回 1，表示未更改密码
        if not ok:
            return 1
        # 如果用户输入了新密码
        if pwd:
            # 在配置列表中添加一项，显示新的密码
            self.config.addItem("New password: " + pwd)
            # 设置配置列表的文本颜色为红色，提示用户注意
            self.config.setStyleSheet("color: red;")
        
        # 如果用户没有输入密码（即密码为空）
        if not pwd:
            # 在配置列表中添加一项，显示默认密码“admin”
            self.config.addItem("Password: admin")
            # 设置配置列表的文本颜色为红色，提示用户注意
            self.config.setStyleSheet("color: red;")
            # 将密码设置为默认值“admin”
            pwd = "admin"
        
        # 将加密后的密码添加到 CONFIG 全局变量中，生成配置指令
        CONFIG.append(
            f"cgi -a manager_passwd={encrypt_md5(f'admin:need input passwd:{pwd}')}")

    def change_ip(self, ip_add=""):
        global CONFIG
        ip, ok = QInputDialog.getText(
            self, "IP Addr", "IP Addr(blank for DHCP): ", QLineEdit.Normal, ip_add)
        if not ok:
            return 1
        if not ip:
            net_dhcp = "true"
            self.config.addItem("No IP. Using DHCP")
            self.config.setStyleSheet("color: red;")
            CONFIG.append(f"cgi -a net_dhcp={net_dhcp}")
        # 如果用户输入了 IP 地址
        if ip:
            net_dhcp = "false"
            # 检查输入的 IP 地址格式是否正确
            if isIP(ip) == False:
                # 如果 IP 地址格式不正确，清除配置列表，并添加错误信息
                self.config.clear()
                self.config.addItem("Not a IP format")
                self.config.setStyleSheet("color: red;")
                return 1
            # 在配置列表中添加一项，显示输入的 IP 地址
            self.config.addItem("IP address: " + ip)
            self.config.setStyleSheet("color: red;")
            # 将静态 IP 配置添加到 CONFIG 全局变量中
            CONFIG.append(f"cgi -a net_dhcp={net_dhcp};cgi -a net_ipaddr={ip}")
        
        # 返回 DHCP 配置和 IP 地址
        return [net_dhcp, ip]

    def change_mask(self, val=""):
        global CONFIG
        mask, ok = QInputDialog.getText(
            self, "Netmask", "Netmask: ", QLineEdit.Normal, val)
        if not ok:
            return 1
        if not mask:
            self.config.clear()
            self.config.addItem("Not a IP format")
            self.config.setStyleSheet("color: red;")
            return 1
        if mask:
            if isIP(mask) == False:
                self.config.clear()
                self.config.addItem("Not a IP format")
                self.config.setStyleSheet("color: red;")
                return 1
            self.config.addItem("Netmask: " + mask)
            self.config.setStyleSheet("color: red;")
            CONFIG.append(f"cgi -a net_netmask={mask}")

    def change_gateway(self, gate=""):
        global CONFIG
        gateway, ok = QInputDialog.getText(
            self, "Gateway", "Gateway: ", QLineEdit.Normal, gate)
        if not ok:
            return 1
        if not gateway or isIP(gateway) == False:
            self.config.clear()
            self.config.addItem("Not a IP format")
            self.config.setStyleSheet("color: red;")
            return 1
        if gateway:
            self.config.addItem("Gateway: " + gateway)
            self.config.setStyleSheet("color: red;")
            CONFIG.append(f"cgi -a net_router={gateway}")

    def change_dns1(self, dns=''):
        global CONFIG
        dns1, ok = QInputDialog.getText(
            self, "DNS 1", "DNS 1(blank for no using DNS): ", QLineEdit.Normal, dns)
        if not ok:
            return 1
        if not dns1:
            self.config.addItem("No DNS Addr 1")
            self.config.setStyleSheet("color: red;")
        if dns1:
            if isIP(dns1) == False:
                self.config.clear()
                self.config.addItem("Not a IP format")
                self.config.setStyleSheet("color: red;")
                return 1
            self.config.addItem("DNS 1: " + dns1)
            self.config.setStyleSheet("color: red;")
            CONFIG.append(f"cgi -a net_dns1={dns1}")

    def change_dns2(self, dns=''):
        global CONFIG
        dns2, ok = QInputDialog.getText(
            self, "DNS 2", "DNS 2(blank for no using DNS 2): ", QLineEdit.Normal, dns)
        if not ok:
            return 1
        if not dns2:
            self.config.addItem("No DNS Addr 2")
            self.config.setStyleSheet("color: red;")
        if dns2 and ok:
            if isIP(dns2) == False:
                self.config.clear()
                self.config.addItem("Not a IP format")
                self.config.setStyleSheet("color: red;")
                return 1
            self.config.addItem("DNS 2: " + dns2)
            self.config.setStyleSheet("color: red;")
            CONFIG.append(f"cgi -a net_dns2={dns2}")

    def change_ewip(self, ip=""):
        global CONFIG
        ew_ip, ok = QInputDialog.getText(
            self, "ESL-working Addr", "EW Address(blank for using auto search): ", QLineEdit.Normal, ip)
        if not ok:
            return 1
        if not ew_ip:
            ew_udp = "true"
            self.config.addItem("ESL-Working Addr: Auto")
            self.config.setStyleSheet("color: red;")
            CONFIG.append(f"cgi -a ew_udp={ew_udp}")
        if ew_ip:
            ew_udp = "false"
            self.config.addItem("ESL-Working Addr: " + ew_ip)
            self.config.setStyleSheet("color: red;")
            CONFIG.append(f"cgi -a ew_udp={ew_udp};cgi -a ew_ipaddr={ew_ip}")
        return ew_udp

    def change_ewport(self, port="37021"):
        global CONFIG
        ew_port, ok = QInputDialog.getText(
            self, "ESL-working Port", "EW Port(blank for 37021): ", QLineEdit.Normal, port)
        if not ok:
            return 1
        if not ew_port:
            ew_port = "37021"
        if ew_port:
            self.config.addItem("ESL-Working Port: " + ew_port)
            self.config.setStyleSheet("color: red;")
        CONFIG.append(f"cgi -a ew_port={ew_port}")

    def change_ewssl(self, ssl=False):
        global CONFIG
        ew_ssl, ok = QInputDialog.getItem(
            self, "ESL-Working SSL", "ESL-Working SSL?", ['false', 'true'], 0, ssl)
        if not ok:
            return 1
        if ew_ssl:
            self.config.addItem("ESL-Working SSL: " + ew_ssl)
            self.config.setStyleSheet("color: red;")
            CONFIG.append(f"cgi -a ew_ssl={ew_ssl}")

    def change_test(self, test=False):
        global CONFIG
        rul_enable, ok = QInputDialog.getItem(
            self, "Mode Test", "Mode Test Enable?", ['true', 'false'], 0, test)
        if not ok:
            return 1
        if rul_enable:
            self.config.addItem("Mode Test Enable: " + rul_enable)
            self.config.setStyleSheet("color: red;")
            CONFIG.append(
                f"cgi -a rul_enable={rul_enable};cgi -a rul_id=52-56-78-53;cgi -a rul_channel=50")

    def change_descript(self, descript=""):
        global CONFIG
        description, ok = QInputDialog.getText(
            self, "Description(optional)", "Description(optional)", QLineEdit.Normal, descript)
        if not ok:
            return 1
        if not description:
            self.config.addItem("Description: None")
            self.config.setStyleSheet("color: red;")
        if description:
            # # 将单引号替换为双引号,但行不通，加上就错,或许可以试试json转义库
            # description = description.replace("'", "\"")
            self.config.addItem("Description: " + description)
            self.config.setStyleSheet("color: red;")
            # 使用双引号将描述包含起来
            CONFIG.append(f'cgi -a descript="{description}"')

    def launchPopup(self, ap_ip, ap_mac):
        print(ap_ip,ap_mac)
        global GRP_CONFIG, CONFIG
        if GRP_CONFIG != "DEFAULT":
            CONFIG = get_file_config(f"config/{GRP_CONFIG}")
        else:
            CONFIG = []
        self.config.clear()
        self.config.addItem("---------------------")
        self.config.addItem(f"{ap_mac.replace('-',':')}")
        self.config.addItem("---------------------")
        self.config.setStyleSheet("color: red;")
        if GRP_CONFIG == "DEFAULT":  # 默认配置处理
            if self.change_pwd() == 1:
                return
            need_change_ip = self.change_ip()[0]
            if need_change_ip == "false":
                if self.change_mask() == 1:
                    return
                if self.change_gateway() == 1:
                    return
                if self.change_dns1() == 1:
                    return
                if self.change_dns2() == 1:
                    return
            elif need_change_ip == 1:
                return
            need_change_ewip = self.change_ewip()
            if need_change_ewip == "false":
                if self.change_ewport() == 1:
                    return
                if self.change_ewssl() == 1:
                    return
            elif need_change_ewip == 1:
                return
            if self.change_test() == 1:
                return
            if self.change_descript() == 1:
                return
        else:
            print(CONFIG)
            for i, conf in enumerate(CONFIG):
                print(i, conf)
                if conf[0] == "!":  # 处理要更改的配置
                    type = conf.split("=")[0].split("!")[1].strip()
                    value = conf.split("=")[1]
                    if type == "manager_passwd":
                        if self.change_pwd(value) == 1:
                            return
                    if type == "net_ipaddr":
                        ip = self.change_ip(value)[1]
                        if ip == 1:
                            return
                    if type == "net_netmask":
                        if self.change_mask(value) == 1:
                            return
                    if type == "net_router":
                        if self.change_gateway(value) == 1:
                            return
                    if type == "net_dns1":
                        if self.change_dns1(value) == 1:
                            return
                    if type == "net_dns2":
                        if self.change_dns1(value) == 1:
                            return
                    if type == "ew_ipaddr":
                        if self.change_ewip(value) == 1:
                            return
                    if type == "ew_port":
                        if self.change_ewport(value) == 1:
                            return
                    if type == "ew_ssl":
                        if self.change_ewssl(value) == 1:
                            return
                    if type == "rul_enable":
                        if self.change_test(value) == 1:
                            return
                    if type == "descript":
                        if self.change_descript(value) == 1:
                            return
                    CONFIG[i] = ''
                else:
                    type = conf.split("=")[0].strip()
                    if GRP_CONFIG == "SystemeU":
                        if type == "net_netmask":
                            CONFIG[i] = "net_netmask=255.255.252.0"
                        if type == "ew_ipaddr":
                            CONFIG[i] = f"ew_ipaddr={range_of_ip(ip,'255.255.252.0')[1]}"
                        if type == "net_router":
                            CONFIG[i] = f"net_router={range_of_ip(ip,'255.255.252.0')[0]}"
            CONFIG = [i for i in CONFIG if i != '']
            for i, conf in enumerate(CONFIG):  # 给固定配置加前缀cgi -a
                type = conf.split("=")[0].strip()
                value = conf.split("=")[1]
                if "cgi -a " not in conf:
                    CONFIG[i] = "cgi -a " + CONFIG[i]
                    self.config.addItem(TRANSLATION[type] + value)
        if 'cgi -a rul_enable=true' in CONFIG:
            CONFIG.append('cgi -a rul_id=52-56-78-53;cgi -a rul_channel=50')
        print(CONFIG)

        self.msgBox.setIcon(QMessageBox().Warning)
        self.msgBox.setText(
            f"Do you want to set these configurations to this AP ({ap_mac})?")
        self.msgBox.setWindowTitle("Are You Sure??")
        self.msgBox.setWindowIcon(QIcon('style/icon.ico'))
        self.msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        returnValue = self.msgBox.exec()
        if returnValue == QMessageBox.Ok:
            self.msgBox = QMessageBox()
            self.msgBox.setIcon(QMessageBox().Warning)
            self.msgBox.setText(
                f"Do you want to restart AP ({ap_mac})? (Needed if network configuration changed)")
            self.msgBox.setWindowTitle("Are You Sure??")
            self.msgBox.setWindowIcon(QIcon('style/icon.ico'))
            self.msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            returnValue = self.msgBox.exec()
            if returnValue == QMessageBox.Ok:
                command = ';'.join(CONFIG)+";sync;cgi -e;reboot;"
            else:
                command = ';'.join(CONFIG)+";sync;cgi -e;"
            print(command)
        # commande = "cgi -e"
        ip = ap_ip
        print(ip)
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            ssh.connect(ip, username="root", password="hanshow-imx6")
            ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(command)
            print(ssh_stdout.read().decode('utf-8'))
        except:
            print("Error when connect to : ", ip)


class GetApTheard(QThread):
    _sum = pyqtSignal(str)  # 信号类型 str

    def __init__(self, interface):
        super().__init__()
        self.interface = interface

    def run(self):
        global df
        try:
            df = get_ap(self.interface).values.tolist()
        except Exception as e:
            print(e)
            VPN = True
        self._sum.emit("success")  # 计算结果完成后，发送结果
        
if __name__ == "__main__":
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


# class GetApTheard(QThread):
#     """该线程用于计算耗时的累加操作"""
#     _sum = pyqtSignal(str)  # 信号类型 str

#     def __init__(self):
#         super().__init__()

#     def run(self):
#         global df, VPN
#         try:
#             df = get_ap().values.tolist()
#         except:
#             VPN = True
#         self._sum.emit("success")  # 计算结果完成后，发送结果
